$maxWidth: 1920;
$maxWidthContainer: 1300;

  // @include adaptive-value("margin-bottom", 80, 60, 1);
  // формула работает так:
  // 1(string) - параметр который нужно рассчитать,
  // 2(integer) - значение по умолчанию(десктоп) которое будет передано в параметр,
  // 3(integer) - значение на разрешении 320 которое должно быть на минимальных экранах,
  // 4(integer) - когда нужно делать изменнеие в зависмости от экрана блока, как максимального так и минимального.

@mixin adaptive-value($property, $startSize, $minSize, $type){
  $addSize: $startSize - $minSize;
  @if $type == 1{
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}){
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }
  @else if $type == 2{
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}){
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }
  @else if $type == 3{
    #{$property}: $startSize + '%';
    @media (max-width: #{$maxWidthContainer + px}){
      #{$property}: calc(#{$minSize + '%'} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }
  @else{
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
  }
}
// font-size
$maxWidth: 1300;

@mixin adaptiv-font($pcSize, $mobSize) {
	$addSize: $pcSize - $mobSize;
	$maxWidth: $maxWidth - 320;
	font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth}));
}

//  Формула по переводу только в rem
$basePix: 4;
$minusPx: 0;

@function rem($px, $basePix, $minusPx){
  @if $minusPx == 0{
    @return ($px / $basePix) + rem;
  }
  @return 'calc(' + ($px / $basePix) + 'rem - ' + $minusPx + 'px)';
}
    
        

        